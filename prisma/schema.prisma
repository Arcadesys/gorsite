generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String?            @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  role            UserRole           @default(USER)
  status          UserStatus         @default(ACTIVE)
  deactivatedAt   DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  accounts        Account[]
  sentInvitations ArtistInvitation[] @relation("InvitedBy")
  commissions     Commission[]
  galleries       Gallery[]
  portfolios      Portfolio[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ArtistInvitation {
  id            String                 @id @default(cuid())
  email         String
  token         String                 @unique
  expiresAt     DateTime
  status        ArtistInvitationStatus @default(PENDING)
  customMessage String?
  invitedBy     String
  acceptedAt    DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  inviter       User                   @relation("InvitedBy", fields: [invitedBy], references: [id])
}

model SiteConfig {
  id                 String   @id @default(cuid())
  siteName           String   @default("Gorath Artist Portfolio")
  siteDescription    String   @default("Digital Artist & Illustrator specializing in fantasy, sci-fi, and character art")
  primaryColor       String   @default("pink")
  secondaryColor     String   @default("purple")
  accentColor        String   @default("pink")
  logoUrl            String?
  faviconUrl         String?
  heroImageUrl       String?
  showGallery        Boolean  @default(true)
  showCommissions    Boolean  @default(true)
  showSocialFeed     Boolean  @default(true)
  showContact        Boolean  @default(true)
  customCss          String?
  customHtml         String?
  commissionTypes    String?
  waitlistEnabled    Boolean  @default(false)
  waitlistMessage    String?
  termsAndConditions String?
  privacyPolicy      String?
  googleAnalyticsId  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Commission {
  id            String             @id @default(cuid())
  clientName    String
  clientEmail   String
  description   String
  type          String
  status        CommissionStatus   @default(REQUESTED)
  paymentStatus PaymentStatus      @default(PENDING)
  priority      CommissionPriority @default(NORMAL)
  price         Float?
  depositPaid   Boolean            @default(false)
  finalPaid     Boolean            @default(false)
  startDate     DateTime?
  dueDate       DateTime?
  completedDate DateTime?
  attachments   String
  notes         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  queuePosition Int?
  queueId       String?
  userId        String?
  queue         CommissionQueue?   @relation(fields: [queueId], references: [id])
  user          User?              @relation(fields: [userId], references: [id])
}

model CommissionQueue {
  id                String       @id @default(cuid())
  name              String       @default("Default Queue")
  description       String?
  isActive          Boolean      @default(true)
  estimatedWaitTime Int?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  commissions       Commission[]
}

model Gallery {
  id          String        @id @default(cuid())
  userId      String
  name        String
  slug        String
  description String?
  isPublic    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       GalleryItem[]
  
  // Optional featured item to represent the gallery
  featuredItemId String? @unique
  featuredItem   GalleryItem? @relation("GalleryFeaturedItem", fields: [featuredItemId], references: [id], onDelete: SetNull)

  @@unique([userId, slug])
}

model GalleryItem {
  id                  String            @id @default(cuid())
  galleryId           String
  title               String
  description         String?
  imageUrl            String
  altText             String?
  tags                String?
  position            Int?
  artistName          String?
  artistPortfolioSlug String?
  artistExternalUrl   String?
  isOriginalWork      Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  commissionPrices    CommissionPrice[]
  artistPortfolio     Portfolio?        @relation("ArtistWorks", fields: [artistPortfolioSlug], references: [slug])
  gallery             Gallery           @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  // Back-relations for featured associations
  featuredInGallery   Gallery?          @relation("GalleryFeaturedItem")
  featuredInPortfolio Portfolio?        @relation("PortfolioFeaturedItem")
}

model Portfolio {
  id              String            @id @default(cuid())
  slug            String            @unique
  displayName     String
  description     String?
  accentColor     String            @default("green")
  colorMode       String            @default("dark")
  logoUrl         String?
  heroImageLight  String?
  heroImageDark   String?
  heroImageMobile String?
  about           String?
  menu            String?
  bio             String?
  location        String?
  website         String?
  profileImageUrl String?
  bannerImageUrl  String?
  isPublic        Boolean           @default(true)
  socialLinks     Json?
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  prices          CommissionPrice[]
  artistWorks     GalleryItem[]     @relation("ArtistWorks")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional featured item to represent the artist's main gallery
  featuredItemId String? @unique
  featuredItem   GalleryItem? @relation("PortfolioFeaturedItem", fields: [featuredItemId], references: [id], onDelete: SetNull)

  // Artist links page entries
  links           Link[]
}

model CommissionPrice {
  id            String       @id @default(cuid())
  portfolioId   String
  title         String
  description   String?
  price         Float
  imageUrl      String?
  galleryItemId String?
  position      Int?
  active        Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  galleryItem   GalleryItem? @relation(fields: [galleryItemId], references: [id])
  portfolio     Portfolio    @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
  DELETED
}

enum ArtistInvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum CommissionStatus {
  REQUESTED
  APPROVED
  IN_PROGRESS
  REVISION
  COMPLETED
  DELIVERED
  CANCELLED
  REJECTED
}

enum PaymentStatus {
  PENDING
  DEPOSIT_PAID
  PAID
  REFUNDED
}

enum CommissionPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Link {
  id          String   @id @default(cuid())
  portfolioId String
  title       String
  url         String
  imageUrl    String?
  position    Int?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}
